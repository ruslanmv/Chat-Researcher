# -*- coding: utf-8 -*-

"""
Functions for generating instances of the `ePrint` class using data
returned by queries of the arXiv API.
"""

from .eprint import ePrint

from datetime import date
from feedparser import parse
from feedparser.util import FeedParserDict


def eprint_from_atom_feed(atom_feed: FeedParserDict) -> ePrint:
    """
    Function that generates an instance of the `ePrint` class using the
    data stored in a `FeedParserDict` object. The `FeedParserDict` is
    in turn a Python representation of an Atom feed returned by a query
    of the arXiv API. This function is not intended for manual use
    (i.e. `atom_feed` should be obtained *only* from a query of the
    arXiv API and not specified by hand).

    Parameters
    ----------
    atom_feed : feedparser.util.FeedParserDict
        `FeedParserDict` representation of an Atom feed returned by a
        query of the arXiv API.

    Returns
    -------
    ePrint
        The content of `atom_feed` converted to an `ePrint` object.
    """
    # Data needed to initialize instance of ePrint class
    title            = atom_feed.title
    authors          = [author.name for author in atom_feed.authors]
    abstract         = atom_feed.summary
    primary_category = atom_feed.arxiv_primary_category["term"]
    all_categories   = [tag["term"] for tag in atom_feed.tags]
    arxiv_id         = atom_feed.id.split("/")[-1]
    abs_url          = f"https://arxiv.org/abs/{arxiv_id}"
    pdf_url          = f"https://arxiv.org/pdf/{arxiv_id}.pdf"
    date_submitted   = date.fromisoformat(atom_feed.published.split("T")[0])
    date_updated     = date.fromisoformat(atom_feed.updated.split("T")[0])

    # arxiv_comment, arxiv_journal_ref, and arxiv_doi are not present
    # by default in atom_feed generated by the arXiv API
    # Check for existence of each and set values accordingly
    if "arxiv_comment" in atom_feed:
        comment = atom_feed.arxiv_comment
    else:
        comment = None
    
    if "arxiv_journal_ref" in atom_feed:
        journal_ref = atom_feed.arxiv_journal_ref
    else:
        journal_ref = None

    if "arxiv_doi" in atom_feed:
        doi     = atom_feed.arxiv_doi
        doi_url = f"https://doi.org/{doi}"
    else:
        doi     = None
        doi_url = None

    # Generate ePrint
    eprint = ePrint(title, authors, abstract, comment, primary_category,
                    all_categories, arxiv_id, abs_url, pdf_url, doi, doi_url,
                    journal_ref, date_submitted, date_updated)
    
    return eprint


def eprint_from_arxiv_id(arxiv_id: str) -> ePrint:
    """
    Function that generates an instance of the `ePrint` class using the
    arXiv ID of the paper of interest.

    Parameters
    ----------
    arxiv_id : str
        The arXiv ID of the desired e-print represented as a string
        (e.g. `'2203.17185'`). If the version number is left
        unspecified (e.g. just `'2303.16915'` instead of
        `'2303.16915v1'`), the most recent version of the e-print is
        obtained. To obtain earlier versions, the version number must
        be specified.

    Returns
    -------
    ePrint
        The arXiv e-print with ID `arxiv_id` converted to an `ePrint`
        object.
    """
    # Validate arxiv_id input
    if not isinstance(arxiv_id, str):
        raise ValueError("invalid input for `arxiv_id`, expected str.")

    # Generate e-print
    url          = f"http://export.arxiv.org/api/query?id_list={arxiv_id}"
    query_result = parse(url)
    atom_feed    = query_result.entries[0]
    eprint       = eprint_from_atom_feed(atom_feed)
    return eprint
